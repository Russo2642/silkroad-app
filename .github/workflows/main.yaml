name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: "registry.digitalocean.com/silkroad-api/silkroad-app"
  IMAGE_TAG: "latest"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to DigitalOcean Docker Registry
        run: |
          echo "${{ secrets.ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u docean --password-stdin

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    outputs:
      image_name: ${{ env.IMAGE_NAME }}
      image_tag: ${{ env.IMAGE_TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSHKEY }}

      - name: Deploy to DigitalOcean
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DROPLET_IP }} << 'EOF'
            set -e
            echo "${{ secrets.ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u docean --password-stdin
            if [ "$(docker ps -q -f name=silkroad-app)" ]; then
                docker stop silkroad-app
                docker rm silkroad-app
            fi
            docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker run -d --name silkroad-app -p 80:80 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_PORT=${{ secrets.DB_PORT }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_SSLMODE=${{ secrets.DB_SSLMODE }} \
              -e TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
              -e TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }} \
              -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
              -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          EOF
